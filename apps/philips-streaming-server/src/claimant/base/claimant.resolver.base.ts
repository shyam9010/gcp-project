/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Claimant } from "./Claimant";
import { ClaimantCountArgs } from "./ClaimantCountArgs";
import { ClaimantFindManyArgs } from "./ClaimantFindManyArgs";
import { ClaimantFindUniqueArgs } from "./ClaimantFindUniqueArgs";
import { CreateClaimantArgs } from "./CreateClaimantArgs";
import { UpdateClaimantArgs } from "./UpdateClaimantArgs";
import { DeleteClaimantArgs } from "./DeleteClaimantArgs";
import { ClaimantService } from "../claimant.service";
@graphql.Resolver(() => Claimant)
export class ClaimantResolverBase {
  constructor(protected readonly service: ClaimantService) {}

  async _claimantsMeta(
    @graphql.Args() args: ClaimantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Claimant])
  async claimants(
    @graphql.Args() args: ClaimantFindManyArgs
  ): Promise<Claimant[]> {
    return this.service.claimants(args);
  }

  @graphql.Query(() => Claimant, { nullable: true })
  async claimant(
    @graphql.Args() args: ClaimantFindUniqueArgs
  ): Promise<Claimant | null> {
    const result = await this.service.claimant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Claimant)
  async createClaimant(
    @graphql.Args() args: CreateClaimantArgs
  ): Promise<Claimant> {
    return await this.service.createClaimant({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Claimant)
  async updateClaimant(
    @graphql.Args() args: UpdateClaimantArgs
  ): Promise<Claimant | null> {
    try {
      return await this.service.updateClaimant({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Claimant)
  async deleteClaimant(
    @graphql.Args() args: DeleteClaimantArgs
  ): Promise<Claimant | null> {
    try {
      return await this.service.deleteClaimant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
