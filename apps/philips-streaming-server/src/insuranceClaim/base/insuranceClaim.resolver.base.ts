/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InsuranceClaim } from "./InsuranceClaim";
import { InsuranceClaimCountArgs } from "./InsuranceClaimCountArgs";
import { InsuranceClaimFindManyArgs } from "./InsuranceClaimFindManyArgs";
import { InsuranceClaimFindUniqueArgs } from "./InsuranceClaimFindUniqueArgs";
import { CreateInsuranceClaimArgs } from "./CreateInsuranceClaimArgs";
import { UpdateInsuranceClaimArgs } from "./UpdateInsuranceClaimArgs";
import { DeleteInsuranceClaimArgs } from "./DeleteInsuranceClaimArgs";
import { InsuranceClaimService } from "../insuranceClaim.service";
@graphql.Resolver(() => InsuranceClaim)
export class InsuranceClaimResolverBase {
  constructor(protected readonly service: InsuranceClaimService) {}

  async _insuranceClaimsMeta(
    @graphql.Args() args: InsuranceClaimCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InsuranceClaim])
  async insuranceClaims(
    @graphql.Args() args: InsuranceClaimFindManyArgs
  ): Promise<InsuranceClaim[]> {
    return this.service.insuranceClaims(args);
  }

  @graphql.Query(() => InsuranceClaim, { nullable: true })
  async insuranceClaim(
    @graphql.Args() args: InsuranceClaimFindUniqueArgs
  ): Promise<InsuranceClaim | null> {
    const result = await this.service.insuranceClaim(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InsuranceClaim)
  async createInsuranceClaim(
    @graphql.Args() args: CreateInsuranceClaimArgs
  ): Promise<InsuranceClaim> {
    return await this.service.createInsuranceClaim({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InsuranceClaim)
  async updateInsuranceClaim(
    @graphql.Args() args: UpdateInsuranceClaimArgs
  ): Promise<InsuranceClaim | null> {
    try {
      return await this.service.updateInsuranceClaim({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InsuranceClaim)
  async deleteInsuranceClaim(
    @graphql.Args() args: DeleteInsuranceClaimArgs
  ): Promise<InsuranceClaim | null> {
    try {
      return await this.service.deleteInsuranceClaim(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
