/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InsuranceClaimService } from "../insuranceClaim.service";
import { InsuranceClaimCreateInput } from "./InsuranceClaimCreateInput";
import { InsuranceClaim } from "./InsuranceClaim";
import { InsuranceClaimFindManyArgs } from "./InsuranceClaimFindManyArgs";
import { InsuranceClaimWhereUniqueInput } from "./InsuranceClaimWhereUniqueInput";
import { InsuranceClaimUpdateInput } from "./InsuranceClaimUpdateInput";

export class InsuranceClaimControllerBase {
  constructor(protected readonly service: InsuranceClaimService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InsuranceClaim })
  async createInsuranceClaim(
    @common.Body() data: InsuranceClaimCreateInput
  ): Promise<InsuranceClaim> {
    return await this.service.createInsuranceClaim({
      data: data,
      select: {
        claimAmount: true,
        claimDate: true,
        createdAt: true,
        id: true,
        policyNumber: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InsuranceClaim] })
  @ApiNestedQuery(InsuranceClaimFindManyArgs)
  async insuranceClaims(
    @common.Req() request: Request
  ): Promise<InsuranceClaim[]> {
    const args = plainToClass(InsuranceClaimFindManyArgs, request.query);
    return this.service.insuranceClaims({
      ...args,
      select: {
        claimAmount: true,
        claimDate: true,
        createdAt: true,
        id: true,
        policyNumber: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InsuranceClaim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async insuranceClaim(
    @common.Param() params: InsuranceClaimWhereUniqueInput
  ): Promise<InsuranceClaim | null> {
    const result = await this.service.insuranceClaim({
      where: params,
      select: {
        claimAmount: true,
        claimDate: true,
        createdAt: true,
        id: true,
        policyNumber: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InsuranceClaim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInsuranceClaim(
    @common.Param() params: InsuranceClaimWhereUniqueInput,
    @common.Body() data: InsuranceClaimUpdateInput
  ): Promise<InsuranceClaim | null> {
    try {
      return await this.service.updateInsuranceClaim({
        where: params,
        data: data,
        select: {
          claimAmount: true,
          claimDate: true,
          createdAt: true,
          id: true,
          policyNumber: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InsuranceClaim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInsuranceClaim(
    @common.Param() params: InsuranceClaimWhereUniqueInput
  ): Promise<InsuranceClaim | null> {
    try {
      return await this.service.deleteInsuranceClaim({
        where: params,
        select: {
          claimAmount: true,
          claimDate: true,
          createdAt: true,
          id: true,
          policyNumber: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
