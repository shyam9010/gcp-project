/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PolicyService } from "../policy.service";
import { PolicyCreateInput } from "./PolicyCreateInput";
import { Policy } from "./Policy";
import { PolicyFindManyArgs } from "./PolicyFindManyArgs";
import { PolicyWhereUniqueInput } from "./PolicyWhereUniqueInput";
import { PolicyUpdateInput } from "./PolicyUpdateInput";

export class PolicyControllerBase {
  constructor(protected readonly service: PolicyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Policy })
  async createPolicy(@common.Body() data: PolicyCreateInput): Promise<Policy> {
    return await this.service.createPolicy({
      data: data,
      select: {
        coverageAmount: true,
        createdAt: true,
        endDate: true,
        id: true,
        policyHolderName: true,
        policyNumber: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Policy] })
  @ApiNestedQuery(PolicyFindManyArgs)
  async policies(@common.Req() request: Request): Promise<Policy[]> {
    const args = plainToClass(PolicyFindManyArgs, request.query);
    return this.service.policies({
      ...args,
      select: {
        coverageAmount: true,
        createdAt: true,
        endDate: true,
        id: true,
        policyHolderName: true,
        policyNumber: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Policy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async policy(
    @common.Param() params: PolicyWhereUniqueInput
  ): Promise<Policy | null> {
    const result = await this.service.policy({
      where: params,
      select: {
        coverageAmount: true,
        createdAt: true,
        endDate: true,
        id: true,
        policyHolderName: true,
        policyNumber: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Policy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePolicy(
    @common.Param() params: PolicyWhereUniqueInput,
    @common.Body() data: PolicyUpdateInput
  ): Promise<Policy | null> {
    try {
      return await this.service.updatePolicy({
        where: params,
        data: data,
        select: {
          coverageAmount: true,
          createdAt: true,
          endDate: true,
          id: true,
          policyHolderName: true,
          policyNumber: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Policy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePolicy(
    @common.Param() params: PolicyWhereUniqueInput
  ): Promise<Policy | null> {
    try {
      return await this.service.deletePolicy({
        where: params,
        select: {
          coverageAmount: true,
          createdAt: true,
          endDate: true,
          id: true,
          policyHolderName: true,
          policyNumber: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
