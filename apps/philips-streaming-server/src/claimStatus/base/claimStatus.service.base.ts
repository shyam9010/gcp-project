/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ClaimStatus as PrismaClaimStatus } from "@prisma/client";

export class ClaimStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClaimStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.claimStatus.count(args);
  }

  async claimStatuses<T extends Prisma.ClaimStatusFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimStatusFindManyArgs>
  ): Promise<PrismaClaimStatus[]> {
    return this.prisma.claimStatus.findMany<Prisma.ClaimStatusFindManyArgs>(
      args
    );
  }
  async claimStatus<T extends Prisma.ClaimStatusFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimStatusFindUniqueArgs>
  ): Promise<PrismaClaimStatus | null> {
    return this.prisma.claimStatus.findUnique(args);
  }
  async createClaimStatus<T extends Prisma.ClaimStatusCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimStatusCreateArgs>
  ): Promise<PrismaClaimStatus> {
    return this.prisma.claimStatus.create<T>(args);
  }
  async updateClaimStatus<T extends Prisma.ClaimStatusUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimStatusUpdateArgs>
  ): Promise<PrismaClaimStatus> {
    return this.prisma.claimStatus.update<T>(args);
  }
  async deleteClaimStatus<T extends Prisma.ClaimStatusDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClaimStatusDeleteArgs>
  ): Promise<PrismaClaimStatus> {
    return this.prisma.claimStatus.delete(args);
  }
}
