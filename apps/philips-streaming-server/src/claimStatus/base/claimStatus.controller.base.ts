/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClaimStatusService } from "../claimStatus.service";
import { ClaimStatusCreateInput } from "./ClaimStatusCreateInput";
import { ClaimStatus } from "./ClaimStatus";
import { ClaimStatusFindManyArgs } from "./ClaimStatusFindManyArgs";
import { ClaimStatusWhereUniqueInput } from "./ClaimStatusWhereUniqueInput";
import { ClaimStatusUpdateInput } from "./ClaimStatusUpdateInput";

export class ClaimStatusControllerBase {
  constructor(protected readonly service: ClaimStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClaimStatus })
  async createClaimStatus(
    @common.Body() data: ClaimStatusCreateInput
  ): Promise<ClaimStatus> {
    return await this.service.createClaimStatus({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClaimStatus] })
  @ApiNestedQuery(ClaimStatusFindManyArgs)
  async claimStatuses(@common.Req() request: Request): Promise<ClaimStatus[]> {
    const args = plainToClass(ClaimStatusFindManyArgs, request.query);
    return this.service.claimStatuses({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClaimStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async claimStatus(
    @common.Param() params: ClaimStatusWhereUniqueInput
  ): Promise<ClaimStatus | null> {
    const result = await this.service.claimStatus({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClaimStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClaimStatus(
    @common.Param() params: ClaimStatusWhereUniqueInput,
    @common.Body() data: ClaimStatusUpdateInput
  ): Promise<ClaimStatus | null> {
    try {
      return await this.service.updateClaimStatus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClaimStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClaimStatus(
    @common.Param() params: ClaimStatusWhereUniqueInput
  ): Promise<ClaimStatus | null> {
    try {
      return await this.service.deleteClaimStatus({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
